Please read at-h10/formats/README to understand:
================================================
	+ `h10typ` understood by ana.cpp and therefore the, rest of the analysis objects
	+  the nuances of Bind-ing h10 TTrees of different `h10typ` to DataH10

ana2pi Branches 
(Listed in accordance with tree-level heirarchy which is set up by executing 'git branch sub-branch' when the top level branch is checked out)
==================================================================
+ master: pre-DNP code; pretty much should reproduce DNP results

	+ elastic: Here I started the effort to setup Simulation on CentOS6 (the idea as to use elastic simulations, hence the name) and also reorganzed a lot of code which mainly affected the production of processed data from h10-data (See handwritten notes). Also a lot of new scripts etc may have been added. 
		+ setup_sim_CentOS6 [02-05-14]: I realized that setting up Simulation was getting to be a more involved task; It was not as simple as directly comparing sim-elastic-data with exp-elastic-data. A lot of details important to my analysis emerged, to list the important ones, Momentum Correction, Energy Loss, "Effective Corrections/Beam Tuning" for Sim and Exp, and also that I should not just compare Elastic data for Sim. & Exp., but also the Missing Mass distributions in my reaction channel. The increasing complexity of this task, made me want to make more change, to not only add new functionality, but also to improve the code's readability and integerity, hence I made this new branch. Some of the salient changes:
		1. proc_top & data_top -> proc_d2pi & data_2pi (Code readability)
			1.i.  More data added to Data2pi (Code integrity)
			1.ii. ProcD2pi::UpdateMM(), ProcD2pi::UpdateVarsets() -> ProcD2pi::UpdateMM(), ProcD2pi::UpdateVarsets() (Code integrity and readability)
			1.iii. Added functionality to make d2pi Tree (New functionality)
                               1.iv. Added functionality for a single instantiation of ProcD2pi to make `d2pi` for Thrown and Reconstructed events (earlier a single instantiation could make `d2pi` for Thrown or Reconstructed events)  
		2. Moved "top" from DataAna to Data2pi (Code integrity)
		3. ProcD2pi::UpdateMM(), ProcD2pi::UpdateVarsets() -> ProcD2pi::UpdateMM(), ProcD2pi::UpdateVarsets() (Code integrity and readability)

			+ extract_obs [06-12-14]: After 'setup_sim_CentOS6', where I set up the simulation on the new CentOS6 machine, along with developing a lot of infrastructure to understand and study (see handwritten and other notes for details):
				- Detector resolution & offsets and its affect on finally reconstructed quantities
				- Affects of various corrections - mcor,ecor,"effcor" - on finally reconstructed quantities,
			I was ready to move on to finally extracting observables, now with a better understanding of details that I was earlier unclear about.

			In order to move on, I realized that I had to address some issues directly and accomodate any other new issues that would arise now that I am thinking about the data in a different perspective. I will try to keep here a note of the salient changes/new features that I will implement in this new branch:
				1. Address large memory consumption while making topX/h8
					i. ProcD2pi::ProcD2pi(): Enabled user to decide if output data should also be in TTree format(along with default option of Histogrammed data) (New feature)
					ii. DataAna::makeYields(): Reduced binning of Q2,W in h8 from 100,400 bins to 10,80 bins (0.5 GeV^2/bin,25 MeV/bin) respectively
					iii. ProcSkimQ2W: Am now using this processor to filter my 'q2wFull' simulation into subsets of q2w i.e. q2wA,q2wB, etc, for processing q2wFull was using up too much memory.
					iv. H10Looper: Gave it capability to monitor memory usage
					v. Updated process to make q2wX/d2pi.root from h10 (proc_h10).See handwritten notes for details.
						Added:
							- proc_h10.cpp/h
							- proc_h10.py
							- q2w_bng.h
							- proc_elist_q2w.h (I am not using this though; am using proc_skim_q2w.h)
						Removed:
							- ana.cpp
						Noteable modifications:
							- DataAna::MakeYields: Implemented variable binning for Q2
							- proc_skim_q2w.h: To help proc_h10 to produce q2wX/d2pi
							The following modifications were made for using proc_elist_q2w with proc_h10, but I am not using them since for for technical and practical reasons,I found it simpler to use proc_skim_q2w. Skimming and making q2wX, I preferred to make TEntryList, because the latter seemed to offer not much advantage in saving time because I would make q2wX/d2pi.root for simulation on the farm anyway and there were additional difficulties presenting themselves in making TEntryList, namely, one odd empty h10 file in a TChain of 10000 h10 files!
							- DataH10 now has methods
								+ set_ientry_h10chain
								+ get_ientry_h10chain
							 that H10Looper uses if the TEntryList made by proc_elist_q2w is to be used.
							

				2. Miscellaneous improvements/new features
					i. ProcEFid: Added hevtsum histogram 
					ii. ProcEid & ProcMomCor: Changed filepath of cut-par files relative to $WORKSPACE so that they could run seamlessly on ifarm too
				3. New files added to process and display yields from d2pi: proc_yields.py and disp_yields.py				
				
					+ extract_obs-new_h8bng [08-28-14]:"new h8 binning"
						1. Code changes all across the process: h10->d2pi.root->yield.root->"displays"
						2. ./obs/setup.tcshrc: Environment variables modified
						3. Added ./sub_studies/study_mem
						4. Added obs/dev: scripts and other tools in development
						5. Added code to extract alpha angle:
						 	5.i. ProcD2pi
						 		+ Added getAlpha()
						 		+ Not using getTheta() method anymore to get theta_cms; LorentVectors once boosted into CMS can directly give theta_cms and going through getTheta() method which use the boosted LorentzVector's dot product with lvQCMS is redundant
						6. Changes to h10->d2pi infrastructure in order to make d2pi_T.root and d2pi_R.root separately (to keep simulation jobs within memory resources):
						 	+ make_d2pi* scripts => h10_2_d2piR* and h10_2_d2piT* scripts
						 		+ submit.make_d2pi_sim* => submit.h10_2_d2piR-sim & submit.h10_2_d2piT-sim 

						+ [11-04-14] IITG_CommitteUpdate_Nov14 (Renamed)=> [02-11-15] extract_obs-new_h8bng.v2
						Created this branch when I moved into the mode of creating presentations for updating my PhD. Committee and IITG. In such a mode, I wish to make changes rather quickly without worrying about the larger integrity of the code. If such changes are lasting, I merge them in. 

						[02-05-15]: Decided to continue using this branch in moving forward with my research in 2015. It seems that the changes I made when preparing for IITG_CommitteeUpdate are consistent with the overall integrity of the code, but I have decided to not merge this branch in with the extract_obs-new_h8bng till I work on it for some more time and re-gain my faith in the code, for it has been a while since I used it!

						[02-11-15] Renamed to extract_obs-new_h8bng.v2
						Renamed so because I the name was more consistent with the overall consitency of this repository. While most of the work was hitherto done in extract_obs-new_h8bng, I did also want to take this opportunity to:
						+ Remove any code the I was not using anymore, but was still hanging around and was creating confusion. Removed:
							+ obs/make_d2pi* (in  extract_obs-new_h8bng,the jobs of these scripts has already been noted as having been move to obs/ h10_2_d2piR* and h10_2_d2piT* scripts)
							+ scripts/
							+ and many others that were not found noteworthy
						+ Produce Observables only for W<=2.125 GeV (genev has "problems" for W>2.125 GeV)

						Additional, noteworthy changes:
						+ obs/submit.h10_2_d2pi[R/T]-sim: centos62 => centos65
						+ Code addition to study Luminosity:
							+ sub_studies/study_lum/: 1st time addition of directory and files
							+ obs/h10_2_dh10skim-exp: 1st time addition
							+ obs/submit.h10_2_dh10skim-exp: 1st time addition
							+ proc_skim_h10.h: 1st time addition (rename of proc_fill_skim.h)
							+ proc_h10.py: Modified to accomodate making of h10skim
							+ proc_lum.h: 1st time addition
							+ proc_eid.h: goodE(), goodE_bos() made Public so that other Procs can use them, for example ProcLum
							+ proc_h10.cpp: Added capability to add ProcLum to Proc chain

							+[02-22-15]test_yield_normalization
							Created this branch because debugging the matter of obtaining the correct normalization factor required extensive testing. Further changes that I made:
								+ Adapted d2pi->yields to process only W<=2.125 GeV
								  (Note h10->d2pi is still capable of processing all W bins)
								+ Added capability to make yields as per Top enter by user
								+ Refined proc_delast.h,data_elastic.h,data_elastic.cpp

							Noteworthy code changes:
								+ data_ana.cpp: 
									+ makeHistsMM() and fillHistsMM(): modified to make, apart from MM_vs_W, directly MM histograms. Additionally, the MM and W ranges were adapted to be able to extract more meaning from the histograms.
									+ Added methods: makeHistsMMElastic(),makeYieldsElastic(),fillHistsMMElastic(),fillYieldsElastic()
								+ proc_skim_q.h, proc_pid.h, proc_d2pi.h:
									+ hevtsum: Keep only meaningful information i.e. removed information that I was not finding useful
									+ Cleaned up code	to make logic of the process clearer in the code. I tested the cleaned up code on ST,SR and ER and found there to be no difference.
								+ proc_skim_q2w.h: Fixed default Q2-W ranges to reflect "thesis range"
								+ proc_h10.cpp: Re-added capability to add in the Processor chain:
									+ ProcSkimQ2W
									+ ProcDelast
								+ obs/q2w_bng.py: Modified to adjust binning to "thesis range" i.e  excluded W>2.125 GeV
								+ obs/proc_yields.py:
									+ Added capability to name output file as per the Tops used to process the yields
									+ Added capability to take in range of Q2,W to use in processing yields
								+ obs/py: Modified to be able to take Tops as input from user.
								+ obs/disp_yields.py:
									+ Added capability to display yields as per Topologies used to make the yields
									+ disp_integ_yield(): Added capability to display yield for different VSTS.
								+ obs/dy_integ: Modified to be able to take Tops as input from user.
								+ obs/ds: Modified code to display simstats on for Thesis Range.
								+ proc_delast.h,data_elastic.h/cpp: Modifications (read proc_delast.h for details)
								+ The following are 1st time additions:
									+ obs/dev/dy_integ_per_top
									+ obs/dev/py_per_top
									+ sub_studies/study_lum/nb_check-count_d2pi_2_yields-ER.ipynb
									+ sub_studies/study_lum/nb_check-count_d2pi_2_yields-SR.ipynb
									+ sub_studies/study_lum/notes/


									+ [03-08-15]test_extend_proch10-frmwrk
										+ data_ana.cpp: makeYieldsElastic(): Changed binning in theta from (40,0,80) to (46,14,60)
										+ proc_delast.h: Changes to this processor was the main reason to create this branch:
											+ Ability to add to TTree produced in Monitor mode, Branches from DataEid and DataPid (see below)
											+ Separated qskim and pid into separate Processors (see below)
										+ proc_h10.cpp: Ability to add ProcPidElast and ProcSkimQElast to Processor chain
										+ proc_eid.h. proc_pid.h:
											+ Made some member functions public so that other Procs can use them.
											+ Add another (simpler) Constructor when other Processors need to use these Classes as tools
										+ ep_processor.h/.cpp: Added another (simpler) Constructor for cases when Processors that are derived from this Base Class are simply used as tools by Processors that are part of the Processor Chain used to process h10
										+ data_eid.h/.cpp: Removed nphe
										+ data_ana.h/.cpp:
											+ Added new data members:
												+ DataSkimQElast
												+ DataPidElast
											+ Added new functions:
												+ makeHistsPidElast()
												+ fillHistsPidElast()
												+ addBranches_DataElastic()
												+ addBranches_DataEid()
												+ addBranches_DataPid()
												+ addBranches_DataPidElast()

										+ 1st time additions to separate cuts made to produce delast
											+ data_pid_elast.h/cpp
											+ data_skim_q_elast.h/.cpp
											+ proc_pid_elast.h
											+ proc_skim_q_elast.h



							




				
