#!/usr/bin/python
from __future__ import division
import ROOT

from proc_yields_lite import ProcYieldsLite
from disp_yields_lite import DispYieldsLite

import atlib as atlib
import q2w_bng

import collections
from array import *
import os,sys
import glob

import matplotlib.pyplot as plt
import numpy as np



"""
ds [obsdir] [sim=siml] [topcmbns=1:2:3:4] 

+ This script displays simstats for user entered simnum (siml by default):
+ The display is saved in obsdir/simnum/simstats

Issues while running this script:
+ [08-14-15]: Variable binning in TH2F is causing core dumps when trying to draw histograms post
division operation (This seems to not be an issue when using CINT).
	+ To solve this program created divide(h1,h2) method
"""
#! Get obsdir
if len(sys.argv)==1:
	sys.exit("Please enter obsdir")
else:
	obsdir=sys.argv[1]
#! User input simnum, else use siml
if len(sys.argv)>2:#i.e. simnum entered by user
	simnum=sys.argv[2]	
else:
        simnum='siml'

topcmbnl=[]
if len(sys.argv)>3:#i.e. topcmbns by user
	topcmbns=sys.argv[3].split("_")
	if len(topcmbns)>0:
		for topcmbn in topcmbns:
			topcmbn=topcmbn.split(':')
			topcmbn=map(int,topcmbn)
			#print "top=",top
			for top in topcmbn:
				if top!=1 and top!=2 and top!=3 and top!=4:
					sys.exit("Please enter each top as 1:2 or 2 or 1:2:3:4 etc")
			topcmbnl.append(topcmbn)
	else:
		sys.exit("Please enter topcmbns as 1:2;2;1:2:3:4")
else:
	topcmbnl.append([1,2,3,4])

print "Displaying simstats for (obsdir,simnun,topcmbns)=(",obsdir,simnum,topcmbnl,")"


#! + The following binning should match up with h8_bng.h/q2w_bng.py
#! + It is slightly modified here for "aesthetic" purposes
WBINW=0.025
NWBINS,WMIN,WMAX=36,1.300,2.200# post removing W>2.125 GeV from analysis #68,1.3,3.0 #25 MeV/bin
NQ2BINS,Q2MIN,Q2MAX=8,1.25,5.25 # place-holder bng, for it will be modified by variable bng
#Q2_VARBINS=array("d",[1.0,1.2,1.6,2.0,2.4,3.0,3.5,4.2,5.0])

def make_h_nbins_vs_Q2W():
	"""
	This function returns a histrogram with theoretically calculate number of PS-bins vs. Q2,W (for VST1)
	"""
	#! Create histogram
	h=ROOT.TH2F("h_nbins","nbins(Q2,W)",NWBINS,WMIN,WMAX,NQ2BINS,Q2MIN,Q2MAX)
	h.SetXTitle("W [GeV]")
	h.SetYTitle("Q^2 [GeV^2]")
	#print("bins for h=%d,%d"%(h.GetXaxis().GetNbins(), h.GetYaxis().GetNbins()))

	nbins=14*14*10*10*10
	#print "nbins=",nbins
	for ixbin in range(h.GetXaxis().GetNbins()):
		for iybin in range(h.GetXaxis().GetNbins()):
			bin=h.GetBin(ixbin+1,iybin+1)
			h.SetBinContent(bin,nbins)
	return h

def divide(h1,h2):
	"""
	Creates a new histogram, h and fills it bins as per:
	h=h1/h2

	Returns h
	"""
	h=ROOT.TH2F("h_div","h_div",NWBINS,WMIN,WMAX,NQ2BINS,Q2MIN,Q2MAX)
	h.SetXTitle("W [GeV]")
	h.SetYTitle("Q^2 [GeV^2]")
	num_wbins=h.GetXaxis().GetNbins()
	num_q2bins=h.GetYaxis().GetNbins()
	for iwbin in range(num_wbins):
		for iq2bin in range(num_q2bins):
			bin=h.GetBin(iwbin+1,iq2bin+1)
			num=h1.GetBinContent(bin)
			den=h2.GetBinContent(bin)
			res=0
			if den!=0:
				res=num/den
			h.SetBinContent(bin,res)
			#print num,den,res
	return h

def subtract(h1,h2):
	"""
	Creates a new histogram, h and fills it bins as per:
	h=h1-h2

	Returns h
	"""
	h=ROOT.TH2F("h_diff","h_diff",NWBINS,WMIN,WMAX,NQ2BINS,Q2MIN,Q2MAX)
	h.SetXTitle("W [GeV]")
	h.SetYTitle("Q^2 [GeV^2]")
	num_wbins=h.GetXaxis().GetNbins()
	num_q2bins=h.GetYaxis().GetNbins()
	for iwbin in range(num_wbins):
		for iq2bin in range(num_q2bins):
			bin=h.GetBin(iwbin+1,iq2bin+1)
			arg1=h1.GetBinContent(bin)
			arg2=h2.GetBinContent(bin)
			res=arg1-arg2
			h.SetBinContent(bin,res)
			#print num,den,res
	return h

#! Create histograms to display simstats(Q2,W)
h={}
for seq in ['T','R','A','H']:
	for par in ['nbins','N','mu','sg']:
		h[seq,par]=ROOT.TH2F("h_%s_%s"%(par,seq),"%s_%s(Q2,W)"%(par,seq),NWBINS,WMIN,WMAX,NQ2BINS,Q2MIN,Q2MAX)
		h[seq,par].SetXTitle("W [GeV]")
		h[seq,par].SetYTitle("Q^2 [GeV^2]")
		#print("bins for h(%s,%s)=%d,%d"%(seq,par,h[seq,par].GetXaxis().GetNbins(),
		#	h[seq,par].GetYaxis().GetNbins()))
		if seq=='A' and par=='mu':
			h[seq,par].GetZaxis().SetRangeUser(0,0.5)#0.2)
		#! Fix z-scale for h['A','sg']
		if seq=='A' and par=='sg':
			h[seq,par].GetZaxis().SetRangeUser(0,0.5)
#! Create histogram for theoretically possible nbins(Q2,W)
h_nbins_vs_Q2W=make_h_nbins_vs_Q2W()

#! Fill histograms
#for topcmbn in topcmbnl:
#outdir=os.path.join(obsdir,simnum,'simstats_top%s'%''.join(str(t) for t in topcmbn))
outdir=os.path.join(obsdir,simnum,'simstats')
if not os.path.exists(outdir):
	os.makedirs(outdir)
dy=DispYieldsLite(obsdir,simnum=simnum)#,tops=topcmbn)
ss=dy.get_sim_stats()
for seq in ['T','R','A','H']:
	for d in ss[seq]:
		q2,w,nbins,N,mu,sg=d[0],d[1],d[2],d[3],d[4],d[5]
		binx=h[seq,'nbins'].GetXaxis().FindBin(w+(0.025/2));
		biny=h[seq,'nbins'].GetYaxis().FindBin(q2);
		print "w,q2,binw,binq2=",w,q2,binx,biny
		bin=h[seq,'nbins'].GetBin(binx,biny)
		h[seq,'nbins'].SetBinContent(bin,nbins)
		h[seq,'N'].SetBinContent(bin,N)
		h[seq,'mu'].SetBinContent(bin,mu)
		h[seq,'sg'].SetBinContent(bin,sg)			
			
#! Display "directly interesting" histograms to monitor simstats
ROOT.gStyle.SetOptStat(0)
c_pars=ROOT.TCanvas("cpars","cpars",1000,1000)
c_pars.Divide(2,2)
c_pars.cd(1)
h_rtio_nbinsT_nbins=divide(h['T','nbins'],h_nbins_vs_Q2W)
#h_rtio_nbinsT_nbins.SetTitle("nbins_T(Q2,W)/nbins(Q2,W))")
h_rtio_nbinsT_nbins.SetTitle("Fraction of max. possible PS-bins that are ST filled(Q^{2},W)")# for top %s"%''.join(str(t) for t in topcmbn))
#h_rtio_nbinsT_nbins.GetZaxis().SetRangeUser(0,1)
h_rtio_nbinsT_nbins.Draw("colz")
c_pars.cd(2)
h_rtio_nbinsH_nbinsT=divide(h['H','nbins'],h['T','nbins'])
h_rtio_nbinsH_nbinsT.GetZaxis().SetRangeUser(0,1)
#h_rtio_nbinsH_nbinsT.SetTitle("nbins_H(Q2,W)/nbins_T(Q2,W))")
h_rtio_nbinsH_nbinsT.SetTitle("Fraction of T PS-bins that are Holes (Q^{2},W)")# for top %s"%''.join(str(t) for t in topcmbn))
h_rtio_nbinsH_nbinsT.Draw("colz")
c_pars.cd(3)
h['A','mu'].SetTitle("#LTA/bin#GT(Q^{2},W)")# for top=%s"%''.join(str(t) for t in topcmbn))
h['A','mu'].Draw("colz")
h['A','mu'].GetZaxis().SetRangeUser(0,0.3)
# if ''.join(str(t) for t in topcmbn)=="1234":
# 	h['A','mu'].GetZaxis().SetRangeUser(0,0.3)
# elif ''.join(str(t) for t in topcmbn)=="1":
# 	h['A','mu'].GetZaxis().SetRangeUser(0,0.06)
# else:
# 	h['A','mu'].GetZaxis().SetRangeUser(0,0.2)#0.1
c_pars.cd(4)
h['A','sg'].SetTitle("RMS_{A/bin}(Q^{2},W)")#" for top=%s"%''.join(str(t) for t in topcmbn))
h['A','sg'].Draw("colz")
h['A','sg'].GetZaxis().SetRangeUser(0,0.3)
# if ''.join(str(t) for t in topcmbn)=="1234":
# 	h['A','sg'].GetZaxis().SetRangeUser(0,0.3)
# else:
# 	h['A','sg'].GetZaxis().SetRangeUser(0,0.1)
# h_rtio_sgA_muA=divide(h['A','sg'],h['A','mu'])
# h_rtio_sgA_muA.GetZaxis().SetRangeUser(0,2)
# h_rtio_sgA_muA.SetTitle("#frac{RMS_{A}}{#LTA#GT}(Q^{2},W)")
# h_rtio_sgA_muA.Draw("colz")
c_pars.SaveAs("%s/pars1.png"%outdir)

c_pars2=ROOT.TCanvas("cpars2","cpars2",1000,1000)
c_pars2.Divide(2,2)
c_pars2.cd(1)
h['T','mu'].SetTitle("#LTT/bin#GT(Q^{2},W)")#" for top %s"%''.join(str(t) for t in topcmbn))
h['T','mu'].Draw("colz")
c_pars2.cd(2)
h_rtio_sgT_muT=divide(h['T','sg'],h['T','mu'])
h_rtio_sgT_muT.GetZaxis().SetRangeUser(0,2)
h_rtio_sgT_muT.SetTitle("#frac{RMS_{T/bin}}{#LTT/bin#GT}(Q^{2},W)")# for top %s"%''.join(str(t) for t in topcmbn))
h_rtio_sgT_muT.Draw("colz")
c_pars2.cd(3)
h['R','mu'].SetTitle("#LTR/bin#GT(Q^{2},W)")#" for top %s"%''.join(str(t) for t in topcmbn))
h['R','mu'].Draw("colz")
c_pars2.cd(4)
h_rtio_sgR_muR=divide(h['R','sg'],h['R','mu'])
h_rtio_sgR_muR.GetZaxis().SetRangeUser(0,2)
h_rtio_sgR_muR.SetTitle("#frac{RMS_{R/bin}}{#LTR/bin#GT}(Q^{2},W)")#" for top %s"%''.join(str(t) for t in topcmbn))
h_rtio_sgR_muR.Draw("colz")
c_pars2.SaveAs("%s/pars2.png"%outdir)

c_pars3=ROOT.TCanvas("cpars3","cpars3",1000,1000)
c_pars3.Divide(2,1)
c_pars3.cd(1)
h['T','N'].SetTitle("N-ST(Q^{2},W)")#" for top %s"%''.join(str(t) for t in topcmbn))
h['T','N'].Draw("colz")
c_pars3.cd(2)
h['R','N'].SetTitle("N-SR(Q^{2},W)")# for top %s"%''.join(str(t) for t in topcmbn))
h['R','N'].Draw("colz")
c_pars3.SaveAs("%s/pars3.png"%outdir)


#! Save all the histograms to file
#f=ROOT.TFile("%s/simstats_top%s.root"%(outdir,''.join(str(t) for t in topcmbn)),"RECREATE")
f=ROOT.TFile("%s/simstats.root"%outdir,"RECREATE")
for seq in ['T','R','A','H']:
	for par in ['nbins','N','mu','sg']:
		h[seq,par].Write()
h_nbins_vs_Q2W.Write()
h_rtio_nbinsT_nbins.Write()
h_rtio_nbinsH_nbinsT.Write()
#h_rtio_sgA_muA.Write()
h_rtio_sgT_muT.Write()
h_rtio_sgR_muR.Write()
f.Close()
