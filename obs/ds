#!/usr/bin/python
from __future__ import division
import ROOT

from proc_yields import ProcYields
from disp_yields import DispYields

import atlib as atlib
import q2w_bng

import collections
from array import *
import os,sys
import glob

import matplotlib.pyplot as plt
import numpy as np



"""
This script displays simstats for user entered sim (siml by default):
	+ nevts-T,R,H(Q2,W)
	+ nbins-T,R,H(Q2,W)
The display is saved in $OBS_DIR/sim

Issues while running this script:
+ [08-14-15]: Variable binning in TH2F is causing core dumps when trying to draw histograms post
division operation (This seems to not be an issue when using CINT).
	+ To solve this program created divide(h1,h2) method
"""

#! + The following binning should match up with q2w_bng.h/.py
#! + It is slightly modified here for "aesthetic" purposes
WBINW=0.025
NWBINS,WMIN,WMAX=80,1.0,3.0 #25 MeV/bin
NQ2BINS,Q2MIN,Q2MAX=7,1.2,5.0 # place-holder bng, for it will be modified by variable bng
Q2_VARBINS=array("d",[1.0,1.2,1.6,2.0,2.4,3.0,3.5,4.2,5.0])

def make_h_nbins_vs_Q2W():
	"""
	This function returns a histrogram with theoretically calculate number of PS-bins vs. Q2,W (for VST1)
	"""
	Mpi=0.139
	Mp=0.938
	Mppip_th=1.1
	Mpippim_th=0.2780

	w=[WMIN+(i*WBINW) for i in np.arange(NWBINS)]
	nbins_Mppip=[((x-Mpi)-Mppip_th)/0.025 for x in w]
	nbins_Mpippim=[((x-Mp)-Mpippim_th)/0.025 for x in w]
	nbins=[M1*M2*10*10*10 for M1,M2 in zip(nbins_Mppip,nbins_Mpippim)]
	
	#! Create nbins_vs_w
	nbins_vs_w=zip(w,nbins)
	#print nbins_vs_w

	#! Create histogram
	h=ROOT.TH2F("h_nbins","nbins(Q2,W)",NWBINS,WMIN,WMAX,NQ2BINS,Q2MIN,Q2MAX)
	h.GetYaxis().Set(len(Q2_VARBINS)-1,Q2_VARBINS)
	h.SetXTitle("W [GeV]")
	h.SetYTitle("Q^2 [GeV^2]")
	print("bins for h=%d,%d"%(h.GetXaxis().GetNbins(), h.GetYaxis().GetNbins()))

	#! Fill h
	for q2 in Q2_VARBINS:
		for id,d in enumerate(nbins_vs_w):
			w=nbins_vs_w[id][0]
			nbins=nbins_vs_w[id][1]
			#print q2,w,nbins
			binx=h.GetXaxis().FindBin(w+(0.025/2));
			biny=h.GetYaxis().FindBin(q2);
			bin=h.GetBin(binx,biny)
			h.SetBinContent(bin,nbins)
	return h

def divide(h1,h2):
	"""
	Creates a new histogram, h and fills it bins as per:
	h=h1/h2

	Returns h
	"""
	h=ROOT.TH2F("h","h",NWBINS,WMIN,WMAX,NQ2BINS,Q2MIN,Q2MAX)
	h.GetYaxis().Set(len(Q2_VARBINS)-1,Q2_VARBINS)
	h.SetXTitle("W [GeV]")
	h.SetYTitle("Q^2 [GeV^2]")
	num_wbins=h.GetXaxis().GetNbins()
	num_q2bins=h.GetYaxis().GetNbins()
	for iwbin in range(num_wbins):
		for iq2bin in range(num_q2bins):
			bin=h.GetBin(iwbin+1,iq2bin+1)
			num=h1.GetBinContent(bin)
			den=h2.GetBinContent(bin)
			res=0
			if den!=0:
				res=num/den
			h.SetBinContent(bin,res)
			#print num,den,res
	return h


#! User input sim, else use siml
if len(sys.argv)<2:
	sim='siml'
else:
	sim=sys.argv[1]
print "Displaying simstats for %s"%sim

datadir=os.environ['OBS_DATADIR_SIM']
outdir=os.path.join(os.environ['OBS_DIR'],sim,'simstats')
if not os.path.exists(outdir):
	os.makedirs(outdir)

q2wl=['q2w%i'%i for i in range(1,50)]
#! Remove "bad" bins (cases where there is no data in yields_exp.root)
q2wl_bad=['q2w7','q2w14','q2w20','q2w21','q2w27','q2w28','q2w29','q2w34','q2w35','q2w36','q2w40','q2w41','q2w42','q2w43','q2w46','q2w47','q2w48','q2w49']
q2wl=[x for x in q2wl if x not in q2wl_bad]
#! q2wl for debugging
#q2wl=['q2w1','q2w2']

#! Create histograms to display simstats(Q2,W)
h={}
for seq in ['T','R','A','H']:
	for par in ['nbins','N','mu','sg']:
		h[seq,par]=ROOT.TH2F("h_%s_%s"%(par,seq),"%s_%s(Q2,W)"%(par,seq),NWBINS,WMIN,WMAX,NQ2BINS,Q2MIN,Q2MAX)
		h[seq,par].GetYaxis().Set(len(Q2_VARBINS)-1,Q2_VARBINS)
		h[seq,par].SetXTitle("W [GeV]")
		h[seq,par].SetYTitle("Q^2 [GeV^2]")
		print("bins for h(%s,%s)=%d,%d"%(seq,par,h[seq,par].GetXaxis().GetNbins(),
			h[seq,par].GetYaxis().GetNbins()))
		if seq=='A' and par=='mu':
			h[seq,par].GetZaxis().SetRangeUser(0,1)#0.5)
		#! Fix z-scale for h['A','sg']
		if seq=='A' and par=='sg':
			h[seq,par].GetZaxis().SetRangeUser(0,2.5)
#! Create histogram for theoretically possible nbins(Q2,W)
h_nbins_vs_Q2W=make_h_nbins_vs_Q2W()

#! Fill histograms
for q2w in q2wl: 
	dy=DispYields(q2w,sim)
	ss=dy.get_sim_stats()
	for seq in ['T','R','A','H']:
		for d in ss[seq]:
			q2,w,nbins,N,mu,sg=d[0],d[1],d[2],d[3],d[4],d[5]
			binx=h[seq,'nbins'].GetXaxis().FindBin(w+(0.025/2));
			biny=h[seq,'nbins'].GetYaxis().FindBin(q2);
			bin=h[seq,'nbins'].GetBin(binx,biny)
			h[seq,'nbins'].SetBinContent(bin,nbins)
			h[seq,'N'].SetBinContent(bin,N)
			h[seq,'mu'].SetBinContent(bin,mu)
			h[seq,'sg'].SetBinContent(bin,sg)			
			
#! Display "directly interesting" histograms to monitor simstats
ROOT.gStyle.SetOptStat(0)
c_pars=ROOT.TCanvas("cpars","cpars",1000,1000)
c_pars.Divide(2,2)
pad=c_pars.cd(1)
h_fracT=divide(h['T','nbins'],h_nbins_vs_Q2W)
h_fracT.SetTitle("nbins_T(Q2,W)/nbins(Q2,W))")
h_fracT.Draw("colz")
c_pars.cd(2)
h_fracH=divide(h['H','nbins'],h['T','nbins'])
h_fracH.SetTitle("nbins_H(Q2,W)/nbins_T(Q2,W))")
h_fracH.Draw("colz")
c_pars.cd(3)
h['A','mu'].Draw("colz")
c_pars.cd(4)
h['A','sg'].Draw("colz")
c_pars.SaveAs("%s/pars.png"%outdir)

#! Save all the histograms to file
f=ROOT.TFile("%s/simstats.root"%outdir,"RECREATE")
for seq in ['T','R','A','H']:
	for par in ['nbins','N','mu','sg']:
		h[seq,par].Write()
h_nbins_vs_Q2W.Write()
h_fracT.Write()
h_fracH.Write()
f.Close()
