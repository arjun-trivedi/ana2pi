#!/usr/bin/python
from proc_yields import ProcYields
from disp_yields import DispYields

import atlib as atlib
import q2w_bng

import collections
from array import *
import os,sys
import glob

import matplotlib.pyplot as plt
import matplotlib

from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
import numpy as np

import ROOT

#! User input sim, else use siml
if len(sys.argv)<2:
	sim='siml'
else:
	sim=sys.argv[1]

datadir=os.environ['OBS_DATADIR_SIM']

q2wl=['q2w%i'%i for i in range(1,50)]
#! Remove "bad" bins (cases where there is no data in yields_exp.root)
q2wl_bad=['q2w7','q2w14','q2w20','q2w21','q2w27','q2w28','q2w29','q2w34','q2w35','q2w36','q2w40','q2w41','q2w42','q2w43','q2w46','q2w47','q2w48','q2w49']
q2wl=[x for x in q2wl if x not in q2wl_bad]

#! + The following binning should match up with q2w_bng.h/.py
#! + It is slightly modified here for "aesthetic" purposes
wbins,wmin,wmax=80,1.0,3.0 #25 MeV/bin
q2bins,q2min,q2max=7,1.2,5.0 # place-holder bng, for it will be modified by variable bng
q2_varbins=array("d",[1.0,1.2,1.6,2.0,2.4,3.0,3.5,4.2,5.0])
h={}
for seq in ['T','R','H']:
	h[seq]=ROOT.TH2F("h_nbins%s"%seq,"nbins%s(Q2,W)"%seq,wbins,wmin,wmax,q2bins,q2min,q2max)
	h[seq].GetYaxis().Set(len(q2_varbins)-1,q2_varbins)
	h[seq].SetXTitle("W [GeV]")
	h[seq].SetYTitle("Q^2 [GeV^2]")

for q2w in q2wl: 
	dy=DispYields(q2w,sim)
	ss=dy.get_sim_stats()
	for seq in ['T','R','H']:
		for d in ss[seq]:
			q2,w,nevts,nbins=d[0],d[1],d[2],d[3]
			binx=h[seq].GetXaxis().FindBin(w+(0.025/2));
			biny=h[seq].GetYaxis().FindBin(q2);
			bin=h[seq].GetBin(binx,biny)
			h[seq].SetBinContent(bin,nbins)
	
ROOT.gStyle.SetOptStat(0)
c=ROOT.TCanvas()
c.Divide(3,1)
c.cd(1)
h['T'].Draw("colz")
c.cd(2)
h['R'].Draw("colz")
c.cd(3)
h['H'].Draw("colz")
c.SaveAs("test.png")
	
# fig = plt.figure()
# ax = fig.add_subplot(111, projection='3d')
# n = 100
# # for c, m, zl, zh in [('r', 'o', -50, -25), ('b', '^', -30, -5)]:
# #     xs = randrange(n, 23, 32)
# #     ys = randrange(n, 0, 100)
# #     zs = randrange(n, zl, zh)
# #     ax.scatter(xs, ys, zs, c=c, marker=m)
# c=cm.rainbow(np.linspace(0, 1, len(siml)))
# l,l_proxy=[],[]
# for isim,sim in enumerate(siml):
# 	l.append(ax.scatter(q2[sim],w[sim],nbins[sim],c=c[isim],marker='o',label=sim))
# 	l_proxy.append(matplotlib.lines.Line2D([0],[0], linestyle="none",c=c[isim],marker='o'))

# ax.legend(l_proxy,siml,prop={'size':9})

# ax.set_xlabel('Q2')
# ax.set_ylabel('W')
# ax.set_zlabel('nbins')

# plt.show()
